import { create } from "zustand";
import { v4 as uuidv4 } from "uuid";
import { db } from "../firebase"; // –Ü–º–ø–æ—Ä—Ç—É–π db
import {
  collection,
  getDocs,
  query,
  where,
  deleteDoc,
  doc,
} from "firebase/firestore";

const initialInterviews = [];

const useStore = create((set, get) => ({
  // üîπ 1. –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
  interviewArr: initialInterviews,

  // üîπ 2. —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É –º–∞—Å–∏–≤ (–ª–æ–∫–∞–ª—å–Ω–æ)
  addInterview: (newInterview) =>
    set((state) => ({
      interviewArr: [...state.interviewArr, { ...newInterview, id: uuidv4() }],
    })),

  // üîπ 3. —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ id (—ñ –∑ Firestore, —ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É)
  deleteInterview: async (idToDelete) => {
    try {
      const uid = get().userId;
      if (!uid) {
        console.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Äî –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏");
        return;
      }

      // –í–∏–¥–∞–ª—è—î–º–æ –∑ Firestore
      await deleteDoc(doc(db, "users", uid, "interviews", idToDelete));

      // –í–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Zustand-—Å—Ç–∞–Ω—É
      set((state) => ({
        interviewArr: state.interviewArr.filter(
          (interview) => interview.id !== idToDelete
        ),
      }));
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤‚Äô—é –∑ Firestore:", error);
    }
  },

  // üîπ 4. —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
  updateInterview: (updatedInterview) =>
    set((state) => ({
      interviewArr: state.interviewArr.map((item) =>
        item.id === updatedInterview.id ? updatedInterview : item
      ),
    })),

  // üîπ 5. selectedInterview –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  selectedInterview: null,

  // üîπ 6. –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ selectedInterview
  setSelectedInterview: (interview) =>
    set(() => ({ selectedInterview: interview })),

  // üîπ 7. —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
  searchText: "",

  setSearchText: (text) => set(() => ({ searchText: text })),

  // üîπ 8. —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â—é—î –ø–æ—à—É–∫
  clearSearchText: () => set(() => ({ searchText: "" })),

  // üîπ 9. –∑–±–µ—Ä—ñ–≥–∞—î–º–æ userId –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  userId: null,
  setUserId: (uid) => set(() => ({ userId: uid })),

  // üîπ 10. –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤‚Äô—é –∑ Firestore
  loadInterviews: async (uid) => {
    try {
      const q = query(collection(db, "users", uid, "interviews"));
      const querySnapshot = await getDocs(q);
      const loaded = [];
      querySnapshot.forEach((doc) => {
        loaded.push({ id: doc.id, ...doc.data() });
      });
      set({ interviewArr: loaded }); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤‚Äô—é:", error);
    }
  },
}));

export default useStore;

// {
//   id: uuidv4(),
//   date: "01.02.2025",
//   company: "Google",
//   statusInterview: "–û—á—ñ–∫—É—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
//   notes: "–ó–∞—è–≤–∞ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è –≤–ø—Ä–æ–¥–æ–≤–∂ 5 –¥–Ω—ñ–≤",
// },
// {
//   id: uuidv4(),
//   date: "22.07.2025",
//   company: "Google",
//   statusInterview: "–û—á—ñ–∫—É—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
//   notes: "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ",
// },
